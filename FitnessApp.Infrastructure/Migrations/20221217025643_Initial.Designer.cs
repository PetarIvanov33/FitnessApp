// <auto-generated />
using System;
using FitnessApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221217025643_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            Content = "Мускулите, използвани от това упражнение, са главно бицепсите и трицепсите, които повдигат екипировката, четворките, глутеус максимус, мускулите на бедрата и разтегателите на долната част на гърба. Мъртвата тяга също действа на синергичните мускули, особено тези на бедрото и трицепсите на прасеца. За поддържане на баланса, използват се и други мускули, като корема, трапец, делтоиди, раменни шапки и мускули на ръцете. Когато всички тези мускули работят, сами ще се убедите, че мъртвата тяга е пълно упражнение за развитие на цялото тяло. Мъртвата тяга е много полезна за тялото. Повишава издръжливостта на тялото. Също така помага за подобряване на силата на координация и баланс на гърба. Флексии също ще бъде отлично за артикулация.",
                            ImageURL = "https://trenirai.bg/wp-content/uploads/2019/02/deadhlift.jpg",
                            Title = "Ползи от МЪРТВАТА ТЯГА"
                        });
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Powerlifting"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Olimpic weightlifting"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Streetlifting"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sprint running  brat"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Long-distance running"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Functional Bodybuilding"
                        });
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "e4b69fce-458e-4234-be1d-852bebf15846"
                        });
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "f17f9cb5-f8ca-4462-85ff-ca3f59136189"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "e999e7c1-d7e5-4fa4-a358-a54b3a3732a2"
                        });
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.CustomerProgram", b =>
                {
                    b.Property<int?>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("ProgramId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersPrograms");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentFileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContentFileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b4656095-c561-4bfa-a5ad-08f7678af1bf",
                            ConcurrencyStamp = "830d72d2-9e67-4620-b5c5-53fd88fa0762",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "42196e3c-e72a-4778-994f-36c85380e060",
                            ConcurrencyStamp = "ceda0b1d-8123-48f2-abee-44f027f75c11",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "9b325984-c63f-4dec-a00b-eeaab3d34035",
                            ConcurrencyStamp = "6844f1ca-79a9-4580-990d-c3f47f6a88c8",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageURL")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasDefaultValue("https://www.pngkey.com/png/detail/115-1150152_default-profile-picture-avatar-png-green.png");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            Age = 25,
                            ConcurrencyStamp = "ea3750d5-37e4-43a2-9317-463862d6dcaf",
                            Email = "coach1@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stanislav",
                            LastName = "Chakurov",
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH@MAIL.COM",
                            NormalizedUserName = "COACH1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHK1fGSJ7aobi6//prgK+y91bMixpz3En45jfFllmMm/vkdJsv/tNMtnIJ7dGRlbiw==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            ProfileImageURL = "https://media-exp1.licdn.com/dms/image/C4E03AQEZzVQV_QkXxA/profile-displayphoto-shrink_800_800/0/1607428598966?e=2147483647&v=beta&t=0usI7YAARf7h56Xdo_bv6xpYtc9y7pUfD7boyRXD9jk",
                            SecurityStamp = "28fa6a19-c322-45c8-b728-945a5e34ec62",
                            TwoFactorEnabled = false,
                            UserName = "coach1"
                        },
                        new
                        {
                            Id = "e4b69fce-458e-4234-be1d-852bebf15846",
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "f2055791-faeb-429a-b10b-d8e43a7f6104",
                            Email = "coach2@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Nikola",
                            LastName = "Tomov",
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH2@MAIL.COM",
                            NormalizedUserName = "COACH2",
                            PasswordHash = "AQAAAAEAACcQAAAAEKM3Ta3e/+B/kIpqLuGbHOg6+1nE0trJHnwnt9NUrzgdrVXq5X0lPWrZPFdFBhfDCQ==",
                            PhoneNumber = "0222222222",
                            PhoneNumberConfirmed = false,
                            ProfileImageURL = "https://media-exp1.licdn.com/dms/image/D4D03AQF2P7FxDvXL_w/profile-displayphoto-shrink_800_800/0/1665589049799?e=2147483647&v=beta&t=UaIubCn4CURIDtu8ZFqW--yzRz0fesLnjAeqUf_iaY0",
                            SecurityStamp = "09805bd9-ea7c-464b-8ca2-9466bb52a8fc",
                            TwoFactorEnabled = false,
                            UserName = "coach2"
                        },
                        new
                        {
                            Id = "30b99904-02f5-4465-87a9-f7f12958029a",
                            AccessFailedCount = 0,
                            Age = 33,
                            ConcurrencyStamp = "3a134f74-550c-4eb1-bc74-bf9377ab14b0",
                            Email = "admin1@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@MAIL.COM",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAEC1FO9/LebKZMGbmyRMNgoFkNhHKpetgYj9MnpumImuHchRA12VE8LvFQvpYaJHZ9g==",
                            PhoneNumber = "0884810188",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc01c0d1-7dfc-4248-bdfa-8693a081e771",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        },
                        new
                        {
                            Id = "f17f9cb5-f8ca-4462-85ff-ca3f59136189",
                            AccessFailedCount = 0,
                            Age = 29,
                            ConcurrencyStamp = "324a0ec2-ec67-4d5e-b1f3-efeee8fcb4c4",
                            Email = "client1@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stan",
                            LastName = "Subev",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@MAIL.COM",
                            NormalizedUserName = "CLIENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEIKqdlAFgbfLYbi25648pKOgpzukEGy7pPdoNMZWdOk2/09D4w/RluUijK59/FZ3dQ==",
                            PhoneNumber = "0885554888",
                            PhoneNumberConfirmed = false,
                            ProfileImageURL = "https://i.ytimg.com/vi/VpQCMU3Q0RU/maxresdefault.jpg",
                            SecurityStamp = "b0b0f8cf-b7c2-48b7-8372-215f92e26ad9",
                            TwoFactorEnabled = false,
                            UserName = "client1"
                        },
                        new
                        {
                            Id = "e999e7c1-d7e5-4fa4-a358-a54b3a3732a2",
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "f4713dc8-2333-4160-8b5b-50bbd14275af",
                            Email = "client2@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Radostin",
                            LastName = "Kuzmanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@MAIL.COM",
                            NormalizedUserName = "CLIENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEATi4iKDIIpSB1yVeaCm47EumYOnBoDUU/q6vnY3aGsAHTrGv3JoZz8/OKQAi2M1EQ==",
                            PhoneNumber = "0256810188",
                            PhoneNumberConfirmed = false,
                            ProfileImageURL = "https://yt3.ggpht.com/ytc/AMLnZu9ZGUZqNxqW_GYK3RGSeuYNdDfqO8M6mBgpRmZjDA=s800-c-k-c0x00ffffff-no-rj",
                            SecurityStamp = "33d462cb-c546-4e29-b7fb-a85bb0c88aab",
                            TwoFactorEnabled = false,
                            UserName = "client2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082",
                            RoleId = "42196e3c-e72a-4778-994f-36c85380e060"
                        },
                        new
                        {
                            UserId = "e4b69fce-458e-4234-be1d-852bebf15846",
                            RoleId = "42196e3c-e72a-4778-994f-36c85380e060"
                        },
                        new
                        {
                            UserId = "30b99904-02f5-4465-87a9-f7f12958029a",
                            RoleId = "b4656095-c561-4bfa-a5ad-08f7678af1bf"
                        },
                        new
                        {
                            UserId = "f17f9cb5-f8ca-4462-85ff-ca3f59136189",
                            RoleId = "9b325984-c63f-4dec-a00b-eeaab3d34035"
                        },
                        new
                        {
                            UserId = "e999e7c1-d7e5-4fa4-a358-a54b3a3732a2",
                            RoleId = "9b325984-c63f-4dec-a00b-eeaab3d34035"
                        });
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Article", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.Coach", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Coach", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Customer", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.CustomerProgram", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.Customer", "Customer")
                        .WithMany("CustomerPrograms")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.Program", "Program")
                        .WithMany("CustomerPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Program", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.Coach", "Author")
                        .WithMany("Programs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.Category", "Category")
                        .WithMany("Programs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.UserRole", b =>
                {
                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessApp.Infrastructure.Data.Enities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Coach", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Customer", b =>
                {
                    b.Navigation("CustomerPrograms");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Program", b =>
                {
                    b.Navigation("CustomerPrograms");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FitnessApp.Infrastructure.Data.Enities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
